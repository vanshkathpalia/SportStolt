generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int               @id @default(autoincrement())
  email                 String            @unique
  username              String?           @unique
  name                  String?
  image                 String?
  bio                   String?
  location              String?
  university            String?
  achievements          String?
  legitimacy            String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  password              String

  points                Int               @default(0)
  badgeLevel            String?

  post                  Post[]
  savedPosts            Save[]
  likedPosts            Like[]
  story                 Story[]
  verifiedStories       Verification[]
  storyAttendance       StoryAttendance[]
  Storyimages           Storyimages[]
  StoryView             StoryView[]
  tweet                 Tweet[]
  registration          Registration[]

  comment               Comment[]
  event                 Event[]

  sentNotifications     Notification[]    @relation("SentNotifications")
  receivedNotifications Notification[]    @relation("ReceivedNotifications")
  followers             Follow[]          @relation("Followers")
  following             Follow[]          @relation("Following")
  followedTags          Tag[]             @relation("TagFollowers")

  resetToken            String?
  resetTokenExpiry      DateTime?
}

model Tag {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  posts     Post[]  @relation("PostTags")
  followers User[]  @relation("TagFollowers")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  tagSting  String[]
  tags      Tag[]     @relation("PostTags")
  createdAt DateTime  @default(now())

  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]
  saves     Save[]
  notifications Notification[]
  Comment   Comment[]
  PostPhoto PostPhoto[]
}

model PostPhoto {
  id     String @id @default(uuid())
  url    String
  postId Int
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id           String         @id @default(uuid())
  content      String
  createdAt    DateTime       @default(now())
  authorId     Int
  eventId      Int?
  postId       Int?

  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Event        Event?         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification Notification[]
}

model Like {
  id     Int   @id @default(autoincrement())
  userId Int
  postId Int

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Save {
  id     Int   @id @default(autoincrement())
  userId Int
  postId Int

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Story {
  id                 Int               @id @default(autoincrement())
  location           String
  locationImage      String?
  sport              String            @default("")
  stadium            String            @default("")
  isViewed           Boolean           @default(false)
  authorId           Int
  endTime            DateTime          @default(now())
  activityStarted    DateTime          @default(now())
  activityEnded      DateTime          @default(now())
  createdAt          DateTime          @default(now())
  duration           Int               @default(0)
  authenticityStatus String?
  rating             Float?
  description        String?
  participants       Int?
  verificationCount  Int               @default(0)
  rewardStatus       String            @default("pending")
  rewardAmount       Float?
  swipeUpEnabled     Boolean           @default(false)

  author             User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Storyimages        Storyimages[]
  StoryView          StoryView[]
  attendees          StoryAttendance[]
}

model Storyimages {
  id                  Int      @id @default(autoincrement())
  url                 String
  createdAt           DateTime @default(now())
  authenticityChecked Boolean  @default(false)
  verifiedBy          Int[]
  verificationCount   Int      @default(0)
  totalReviews        Int      @default(0)
  isRewarded          Boolean  @default(false)
  userId              Int
  storyImageId        Int
  
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  story               Story    @relation(fields: [storyImageId], references: [id], onDelete: Cascade)
  Verification        Verification[]
  attendance          StoryAttendance[]
  notifications       Notification[]
}

model StoryView {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  viewedAt  DateTime @default(now())

  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
}

model Verification {
  id             Int         @id @default(autoincrement())
  verificationId Int
  userId         Int
  verified       Boolean
  createdAt      DateTime    @default(now())

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyImages    Storyimages @relation(fields: [verificationId], references: [id], onDelete: Cascade)
}

model StoryAttendance {
  id           Int      @id @default(autoincrement())
  storyImageId Int
  userId       Int
  attendedAt   DateTime @default(now())
  storyId      Int?

  storyImage Storyimages @relation(fields: [storyImageId], references: [id], onDelete: Cascade)
  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Story      Story?      @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyImageId, userId])
}

model Event {
  id          Int       @id @default(autoincrement())
  image       String
  likeCount   Int       @default(0)
  country     String    @default("")
  state       String    @default("")
  city        String    @default("")
  authorId    Int
  stadium     String    @default("")
  StartDate   DateTime
  EndDate     DateTime
  StartTime   DateTime
  OrganisedBy String
  name        String
  createdAt   DateTime  @default(now())

  Comment     Comment[]
  registration Registration[]
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Registration {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Notification {
  id           Int       @id @default(autoincrement())
  type         String?
  message      String
  senderId     Int?
  receiverId   Int
  createdAt    DateTime  @default(now())
  seen         Boolean   @default(false)
  postId       Int?
  commentId    String?
  storyImageId Int?
  followId     Int?
  scheduledAt  DateTime?

  sender     User?        @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User         @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  post       Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  storyImage Storyimages? @relation(fields: [storyImageId], references: [id], onDelete: Cascade)
  follow     Follow?      @relation(fields: [followId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  STORY_ATTENDANCE
  STORY_VERIFICATION
  SYSTEM
}

model Follow {
  id          Int       @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime  @default(now())

  follower    User      @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User      @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@unique([followerId, followingId], name: "followerId_followingId")
}

model Tweet {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  updatedAt DateTime @updatedAt
  userId    Int
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Playlist {
  id         Int      @id @default(autoincrement())
  sportName  String
  skillLevel String
  keywords   String
  link       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}




// model User {
//   id                    Int               @id @default(autoincrement())
//   email                 String            @unique
//   username              String?
//   createdAt             DateTime          @default(now())
//   updatedAt             DateTime          @updatedAt
//   password              String
//   points                Int               @default(0)
//   image                 String?
//   resetToken            String?           
//   resetTokenExpiry      DateTime?   
//   // individualProfile   IndividualProfile? @relation(fields: [individualProfileId], references: [id])
//   // orgProfile   OrganizationProfile? @relation(fields: [orgProfileId], references: [id]) 
//   // individualProfile     IndividualProfile?
//   // orgProfile            OrganizationProfile?   
//   // type                  UserType 
//   badge                 Badge[]
//   comment               Comment[]
//   event                 Event[]
//   like                  Like[]
//   photo                 Photo[]
//   post                  Post[]
//   story                 Story[]
//   Storyimages           Storyimages[]
//   tweet                 Tweet[]
//   verification          Verification[]
//   storyAttendance       StoryAttendance[]
//   registration          Registration[]
//   sentNotifications     Notification[]    @relation("SentNotifications")
//   receivedNotifications Notification[]    @relation("ReceivedNotifications")
//   followers             Follow[]          @relation("Followers")
//   following             Follow[]          @relation("Following")
//   savedPosts            Save[]
// }

// model IndividualProfile {
//   id       Int      @id @default(autoincrement())
//   userId   Int      @unique
//   fullname String
//   age      Int
//   sportInterest String
//   gender   String
//   city     String
//   state    String
//   country  String
//   user     User     @relation(fields: [userId], references: [id])
// }

// model OrganizationProfile {
//   id         Int      @id @default(autoincrement())
//   userId     Int      @unique
//   type       OrganizationType
//   orgName    String
//   orgType    String?
//   orgWebsite String?
//   noOfStudent Int
//   address    String?
//   city       String
//   state      String
//   country    String
//   user       User     @relation(fields: [userId], references: [id])
// }

// enum OrganizationType {
//   SCHOOL
//   COLLEGE
//   University
//   ACADEMY
//   CLUB
//   COMPANY
//   NGO
//   OTHER
// }

// enum UserType {
//   INDIVIDUAL
//   ORG
// }


// model Photo {
//   id        String   @id @default(uuid())
//   url       String
//   caption   String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int
//   User      User     @relation(fields: [userId], references: [id])
// }
//why this is here ??? what is the use of this model 
