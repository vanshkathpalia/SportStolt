generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Badge {
  id        String   @id
  name      String
  userId    Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  eventId   Int?
  postId    Int?
  author      User     @relation(fields: [authorId], references: [id])
  Event     Event?   @relation(fields: [eventId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  likeCount   Int       @default(0)
  country     String    @default("")
  state       String    @default("")
  city        String    @default("")
  authorId    Int
  stadium     String    @default("")
  StartDate   DateTime
  EndDate     DateTime
  StartTime   DateTime
  OrganisedBy String
  Comment     Comment[]
  author      User      @relation(fields: [authorId], references: [id])
  Like        Like[]
}

model Like {
  id        String   @id
  createdAt DateTime @default(now())
  eventId   Int?
  postId    Int?
  userId    Int
  Event     Event?   @relation(fields: [eventId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Photo {
  id        String   @id
  url       String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int
  User    User     @relation(fields: [userId], references: [id])
}

model Post {
  id        Int         @id @default(autoincrement())
  content   String
  title     String
  published Boolean     @default(false)
  likeCount Int         @default(0)
  authorId  Int
  Comment   Comment[]
  Like      Like[]
  author    User        @relation(fields: [authorId], references: [id])
  PostPhoto PostPhoto[]
}

model PostPhoto {
  id     String @id
  url    String
  postId Int
  Post   Post   @relation(fields: [postId], references: [id])
}


model Story {
  id         Int      @id @default(autoincrement())
  Storyimages     Storyimages[]
  location   String
  locationImage String?  // New field for storing location image
  sport      String   @default("")
  stadium    String   @default("")
  isViewed   Boolean  @default(false)
  authorId   Int
  endTime    DateTime @default(now())
  activityStarted   DateTime  @default(now())
  activityEnded     DateTime  @default(now())
  createdAt  DateTime @default(now())
  duration   Int      @default(0)
  author     User     @relation(fields: [authorId], references: [id])
  authenticityStatus String? // 'pending', 'verified', 'not_verified'
  rating     Float?   // Average rating
  description String?  // Detailed description of the story
  eventLink  String?  // Link to related event or external content
  verificationCount Int @default(0) // Number of verifications received
  rewardStatus String @default("pending") // pending, eligible, rewarded
  rewardAmount Float?  // Amount of reward tokens
  swipeUpEnabled Boolean @default(false) // Whether story has swipe-up content
}

model Storyimages {
  id        String   @id @default(uuid())
  url       String   
  story     Story    @relation(fields: [storyId], references: [id])
  storyId   Int   
  createdAt DateTime @default(now())
  authenticityChecked Boolean @default(false)
  UserID    Int // The user who posted this image
  verifiedBy Int[]   // Array of user IDs who verified this image
  User      User    @relation(fields: [UserID], references: [id])
}

model Tweet {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int
  author    User     @relation(fields: [userId], references: [id])
}

model User {
  username  String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  String
  points    Int       @default(0)
  id        Int       @id @default(autoincrement())
  Badge     Badge[]
  Comment   Comment[]
  Event     Event[]
  Like      Like[]
  Photo     Photo[]
  Post      Post[]
  Story     Story[]
  Tweet     Tweet[]
  Storyimages Storyimages[]
}
